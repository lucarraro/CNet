[{"path":"https://lucarraro.github.io/rivnet/articles/rivnet.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"An introduction to rivnet","text":"rivnet enables seamless R-based extraction river networks watershed data Digital Elevation Models (DEMs) without need install operate GIS software. primarily intended riverscape-analyzing tool subsequent ecological, hydrological biogeochemical modelling. Features: Analyze user-provided DEMs automatically downloaded open source repositories Identify flow directions implementing TauDEM’s D8 flow direction algorithm Delineate reaches, subcatchments, lengths, slopes areas Calculate along-stream distances network nodes Attribute sites river network Evaluate covariates subcatchment level user-provided raster files Derive hydraulic hydrological variables across network point measurements rivnet produces river objects, compatible OCNet package, can hence analyzed displayed OCNet functions. , river objects can made compatible igraph SSN packages.","code":""},{"path":"https://lucarraro.github.io/rivnet/articles/rivnet.html","id":"installing-the-package","dir":"Articles","previous_headings":"","what":"Installing the package","title":"An introduction to rivnet","text":"rivnet can installed CRAN: development version can installed Github: Among packages, rivnet depends traudem package, turn, TauDEM library. traudem provides guide correct installation TauDEM dependencies different operating systems, offers wrapper commands call TauDEM methods R. Please read traudem documentation carefully.","code":"install.packages(\"rivnet\") devtools::install_github(\"lucarraro/rivnet\")"},{"path":"https://lucarraro.github.io/rivnet/articles/rivnet.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"An introduction to rivnet","text":"Functions output packages rivnet OCNet interoperable according following workflow: Overview rivnet OCNet functions. aggregate_river, paths_river, river_to_igraph river_to_SSN aliases aggregate_OCN, paths_OCN, OCN_to_igraph OCN_to_SSN, respectively; path_velocities_river requires paths_river one hydro_river rivergeometry_OCN. main function rivnet extract_river. function analyzes DEM generates river object. Necessary inputs either user-provided DEM extent region DEM data downloaded open-source repositories (via elevatr package); coordinates outlet(s) interest. extract_river can also used wrapper TauDEM set functions extracting D8 flow directions contributing area: Workflow TauDEM functions used extract_river. Refer TauDEM documentation details functions. river objects obtained extract_river can processed aggregate_river (builds river network different aggregation levels) paths_river (calculates paths path distances network nodes). Refer OCNet documentation details definition aggregation levels behavior functions.","code":""},{"path":"https://lucarraro.github.io/rivnet/articles/rivnet.html","id":"a-minimal-example","dir":"Articles","previous_headings":"","what":"A minimal example","title":"An introduction to rivnet","text":"Extract river (Wigger, Switzerland) user-provided DEM: Outlet coordinates must expressed coordinate system input DEM. river can extracted starting DEM data downloaded open-source servers:  plot method defined river objects, calls different drawing functions OCNet package. default behavior depends attributes included river object:  first case, plot calls draw_simple_OCN; second case, calls draw_thematic_OCN. computational speed issues, examples provided derived rather coarse DEMs. increase resolution DEM (thus resulting river), possible increase z value extract_river (see elevatr documentation details).","code":"fp <- system.file(\"extdata/wigger.tif\", package = \"rivnet\") r <- extract_river(outlet = c(637478, 237413), DEM = fp) r #> Class         : river  #> Type          : Real river  #> No. FD nodes  : 8768  #> Dimensions    : 195 x 242  #> Cell size     : 208.23  #> Has elevation : TRUE  #> Aggregated    : FALSE r2 <- extract_river(outlet = c(637478, 237413),     EPSG = 21781, #CH1903/LV03 coordinate system     ext = c(6.2e5, 6.6e5, 2e5, 2.5e5),     z = 10)  plot(r2) r2 <- aggregate_river(r2) plot(r2)"},{"path":"https://lucarraro.github.io/rivnet/articles/rivnet.html","id":"other-functions","dir":"Articles","previous_headings":"","what":"Other functions","title":"An introduction to rivnet","text":"locate_site: finds river network node closest given site (identified coordinates). Attribution can performed either crow flies, following steepest descent. possible use locator() function identify input coordinates directly clicking river plot. covariate_river: attributes covariate values user-defined raster files subcatchments river network. local upstream-averaged covariate values calculated. Covariates can either categorical (e.g., land cover classes) continuous (e.g., temperature values). hydro_model: assigns hydraulic variables (width, river depth, water discharge, derived variables) nodes network starting minimal number measured values, based power-law scaling relationships uniform flow equations (Gauchler-Strickler-Manning). can deal non-rectangular cross-sections (hence varying width function discharge).","code":""},{"path":"https://lucarraro.github.io/rivnet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luca Carraro. Maintainer, author. University Zurich. Copyright holder, funder.","code":""},{"path":"https://lucarraro.github.io/rivnet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carraro L (2023). “Technical note: Seamless extraction analysis river networks R.” Hydrology Earth System Sciences. doi:10.5194/hess-27-3733-2023.","code":"@Article{,   title = {Technical note: Seamless extraction and analysis of river networks in R},   author = {Luca Carraro},   year = {2023},   journal = {Hydrology and Earth System Sciences},   doi = {10.5194/hess-27-3733-2023}, }"},{"path":"https://lucarraro.github.io/rivnet/index.html","id":"rivnet-","dir":"","previous_headings":"","what":"Extract and Analyze Rivers from Elevation Data","title":"Extract and Analyze Rivers from Elevation Data","text":"R-package allowing seamless extraction river networks Digital Elevation Models data.","code":""},{"path":"https://lucarraro.github.io/rivnet/index.html","id":"what-this-package-does","dir":"","previous_headings":"","what":"What this package does","title":"Extract and Analyze Rivers from Elevation Data","text":"Analysis Digital Elevation Models, either provided externally downloaded open source repositories (latter case, interfacing elevatr package). Extraction river networks performed via TauDEM’s D8 flow direction algorithm (interfacing traudem package). Resulting river networks compatible functions OCNet package, can plotted analyzed accordingly (thus also compatible packages igraph SSN). Distances, areas, subcatchments, slopes can computed. obtained river networks can used hydrological ecological modelling studies. details, please see Carraro (2023). Technical note: Seamless extraction analysis river networks R. Hydrology Earth System Sciences. https://doi.org/10.5194/hess-27-3733-2023.","code":""},{"path":"https://lucarraro.github.io/rivnet/index.html","id":"a-minimal-working-example","dir":"","previous_headings":"","what":"A minimal working example","title":"Extract and Analyze Rivers from Elevation Data","text":"Extract river Wigger (Switzerland) externally provided DEM raster file. Outlet coordinates CH1903/LV03 projected coordinate system (.e., DEM file): result can obtained downloading DEM data via elevatr:","code":"fp <- system.file(\"extdata/wigger.tif\", package = \"rivnet\")  r <- extract_river(outlet = c(637478, 237413),                       DEM = fp) r <- extract_river(outlet = c(637478, 237413),                       EPSG = 21781, #CH1903/LV03 coordinate system                       ext = c(6.2e5, 6.6e5, 2e5, 2.5e5),                       z = 8)"},{"path":"https://lucarraro.github.io/rivnet/index.html","id":"installation-issues","dir":"","previous_headings":"","what":"Installation issues","title":"Extract and Analyze Rivers from Elevation Data","text":"rivnet depends traudem, whose installation might require caution depending operating system. Please read documentation carefully.","code":""},{"path":"https://lucarraro.github.io/rivnet/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Extract and Analyze Rivers from Elevation Data","text":"Luca Carraro (maintainer)","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/aggregate_river.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate a river — aggregate_river","title":"Aggregate a river — aggregate_river","text":"Aggregates river","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/aggregate_river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate a river — aggregate_river","text":"","code":"aggregate_river(river, ...)"},{"path":"https://lucarraro.github.io/rivnet/reference/aggregate_river.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate a river — aggregate_river","text":"river river object. ... arguments passed aggregate_OCN.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/aggregate_river.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate a river — aggregate_river","text":"river object. See aggregate_OCN description structure.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/aggregate_river.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate a river — aggregate_river","text":"alias aggregate_OCN.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/aggregate_river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate a river — aggregate_river","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # \\donttest{  fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\")  r <- extract_river(outlet=c(637478,237413),   DEM=fp) r <- aggregate_river(r) # } }"},{"path":"https://lucarraro.github.io/rivnet/reference/contour_to_shapefile.html","id":null,"dir":"Reference","previous_headings":"","what":"Export catchment contour as shapefile — contour_to_shapefile","title":"Export catchment contour as shapefile — contour_to_shapefile","text":"Export catchment contour shapefile.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/contour_to_shapefile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export catchment contour as shapefile — contour_to_shapefile","text":"","code":"contour_to_shapefile(river, filename,                       EPSG = NULL, ...)"},{"path":"https://lucarraro.github.io/rivnet/reference/contour_to_shapefile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export catchment contour as shapefile — contour_to_shapefile","text":"river river object. filename Character. Output file name. must contain \".shp\" extension. EPSG EPSG code. Default NULL, produce .prj file (.e., shapefile  contain projection information). ... Additional arguments passed writeVector (e.g., overwrite = TRUE allows overwriting existing shapefile).","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/contour_to_shapefile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export catchment contour as shapefile — contour_to_shapefile","text":"output produced. function used side effetcs.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/rivnet/reference/contour_to_shapefile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export catchment contour as shapefile — contour_to_shapefile","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() library(terra) # to use \"vect\" fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\") river <- extract_river(outlet=c(637478,237413), DEM=fp)  tmpname <- paste0(tempfile(), \".shp\") contour_to_shapefile(river, tmpname, overwrite = TRUE)  # read output vv <- vect(tmpname) vv plot(vv)  # \\donttest{ # export contour shapefile for multiple catchments river <- extract_river(outlet=data.frame(x=c(637478,629532),y=c(237413,233782)),                    EPSG=21781, #CH1903/LV03 coordinate system                    ext=c(6.2e5,6.6e5,2e5,2.5e5),                    z=8)             contour_to_shapefile(river, tmpname, overwrite = TRUE) vv <- vect(tmpname) vv plot(vv)  # add projection  contour_to_shapefile(river, tmpname,            EPSG = 21781,            overwrite = TRUE) vv <- vect(tmpname) vv           # }  }"},{"path":"https://lucarraro.github.io/rivnet/reference/covariate_river.html","id":null,"dir":"Reference","previous_headings":"","what":"Attribute covariates to nodes of a river network — covariate_river","title":"Attribute covariates to nodes of a river network — covariate_river","text":"Attributes covariate values raster files subcatchments river object. local upstream-averaged covariate values calculated.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/covariate_river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attribute covariates to nodes of a river network — covariate_river","text":"","code":"covariate_river(x, river, categorical = TRUE, overwrite = FALSE)"},{"path":"https://lucarraro.github.io/rivnet/reference/covariate_river.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attribute covariates to nodes of a river network — covariate_river","text":"x SpatRaster object (obtained via rast) containing categorical continuous variables covariates computed. coordinate system must river. Consider using terra::project change coordinate system. river river object. must aggregated (via aggregate_river). categorical Logical. covariate categorical (e.g. land cover classes)? x consists several layers, possible specify categorical vector logicals (one per layer); alternatively, single value categorical applied layers x. overwrite Logical. TRUE, overwrite previously calculated covariates.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/covariate_river.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attribute covariates to nodes of a river network — covariate_river","text":"river object. following elements added: SC$locCov Data frame covariates evaluated local values subcatchment (.e., mean covariate value within catchment). SC$upsCov Data frame covariates evaluated upstream-averaged values subcatchment (.e., mean covariate value within area upstream given subcatchment, including subcatchment ).","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/covariate_river.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Attribute covariates to nodes of a river network — covariate_river","text":"categorical = TRUE, number columns SC$locCov, SC$upsCov equal number unique values x within catchment. Column names composed \"y_z\",  y = names(x) z unique values x. Values correspond fraction pixels (FD nodes) within local/upstream area covered given category (e.g., land cover type). categorical = FALSE, SC$locCov SC$upsCov single column named names(x). Values correspond mean covariate value within local/upstream reference area. x multiple layers, columns data frames added sequentially. occurs covariate_river run repeated times (instance, compute covariates one SpatRaster object time) overwrite = FALSE.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/rivnet/reference/covariate_river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attribute covariates to nodes of a river network — covariate_river","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # \\donttest{   fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\") river <- extract_river(outlet=c(637478,237413),                        DEM=fp) river <- aggregate_river(river)  # land cover raster file (categorical) r1 <- terra::rast(system.file(\"extdata/landcover.tif\", package=\"rivnet\"))  # legend: 1-urban; 2-agriculture; 3-forest; 4-improductive  river <- covariate_river(r1, river)  plot(river$SC$locCov[ , 1], river) # fraction of urban area within a subcatchment plot(river$SC$upsCov[ , 1], river) # fraction of upstream-averaged urban area     # mean air temperature raster file (continuous)  r2 <- terra::rast(system.file(\"extdata/temperature.tif\", package=\"rivnet\"))  river <- covariate_river(r2, river, categorical = FALSE)  plot(river$SC$locCov[, 5], river) # the layer has been added after the 4 previous ones   names(river$SC$locCov)     # } }"},{"path":"https://lucarraro.github.io/rivnet/reference/extract_river.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a river — extract_river","title":"Extract a river — extract_river","text":"Function extracts river network elevation data via TauDEM's D8 flow direction algorithm. can return river object /output TauDEM functions raster file. Elevation data can either downloaded web provided externally.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/extract_river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a river — extract_river","text":"","code":"extract_river(outlet, EPSG=NULL, ext=NULL, z=NULL, DEM=NULL,   as.river=TRUE, as.rast=FALSE, filename=NULL, showPlot=FALSE,   threshold_parameter=1000, n_processes=1, displayUpdates=0, src=\"aws\",   args_get_elev_raster=list())"},{"path":"https://lucarraro.github.io/rivnet/reference/extract_river.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a river — extract_river","text":"outlet vector, matrix data frame expressing coordinates river outlet(s) (coordinate system identified EPSG, DEM, latter provided). vector, odd components identify longitudinal (x) coordinates, even components latitudinal (y) coordinates. matrix, 2 columns (x y coordinates respectively) number rows equal number outlets. data frame, components outlet$x, outlet$y identifying respective coordinates. EPSG EPSG code identifying coordinate system used. See https://epsg.org/. required DEM specified, used otherwise. recommended use projected coordinate systems, lengths areas river object metric units. ext Vector expressing extent region elevation data downloaded. must form c(xmin, xmax, ymin, ymax). Coordinates must expressed coordinate system identified EPSG. required DEM specified, used otherwise. z Zoom level elevation data downloaded. See get_elev_raster details. required DEM specified, used otherwise. DEM Filename Digital Elevation Model raster file used. .river Logical. river object created? .rast Logical. raster file containing results traudem functions output created? filename Filename raster file produced .rast=TRUE. required .rast=TRUE. can single filename, four filenames, case four different raster files produced. See Details. showPlot Logical. plot calculated contributing area extracted catchment contour produced? threshold_parameter Value passed taudem_threshold. See example `traudem` documentation details. n_processes Value passed traudem functions. displayUpdates Numeric. Possible values 0, 1, 2. 0, console output suppressed (barring messages elevatr::get_elev_raster, DEM provided). 1, succint console output produced. 2, extensive  console output elevatr::get_elev_raster traudem functions displayed. src Value passed get_elev_raster. Deprecated. args_get_elev_raster List additional parameters passed get_elev_raster. Parameters included list override default options (example, two different zoom values specified args_get_elev_raster$z z, latter considered. )","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/extract_river.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a river — extract_river","text":"river object. See create_OCN, landscape_OCN description structure.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/extract_river.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a river — extract_river","text":"wrapper elevatr traudem functions, allowing seamless extraction river networks elevation data. output river object compatible OCNet functions (equivalent OCN produced landscape_OCN). workflow TauDEM commands used follows:  PitRemove -> D8FlowDir -> D8ContributingArea -> StreamDefByThreshold ->  MoveOutletsToStreams -> D8ContributingArea.  See https://hydrology.usu.edu/taudem/taudem5/index.html details TauDEM. .rast = TRUE, raster file returned. consists four layers: fel pit-filled elevation data p D8 flow directions ad8 contributing area whole region ssa contributing area respect outlet(s) used raster file written via terra::writeRaster. nested outlets specified, function ignores upstream outlet.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/rivnet/reference/extract_river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a river — extract_river","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # extract the river Wigger (Switzerland) from DEM raster file # outlet coordinates are expressed in the CH1903/LV03 coordinate system # (i.e. same as the DEM file)  fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\")  r <- extract_river(outlet=c(637478,237413),   DEM=fp) r   # \\donttest{ # same as above but download DEM data via elevatr r <- extract_river(outlet=c(637478,237413),   EPSG=21781, #CH1903/LV03 coordinate system   ext=c(6.2e5,6.6e5,2e5,2.5e5),   z=8) # }  # \\donttest{ # enhance resolution by increasing zoom r2 <- extract_river(outlet=c(637478,237413),   EPSG=21781, #CH1903/LV03 coordinate system   ext=c(6.2e5,6.6e5,2e5,2.5e5),   z=9) plot(r) plot(r2) # }  # \\donttest{ # specify two outlets as a data frame r <- extract_river(outlet=data.frame(x=c(637478,629532),y=c(237413,233782)),                     EPSG=21781, #CH1903/LV03 coordinate system                     ext=c(6.2e5,6.6e5,2e5,2.5e5),                     z=10, showPlot=TRUE) plot(r)  r <- aggregate_river(r) plot(r, chooseCM = 2)  # display only the second catchment # (i.e. that identified by the second outlet) # }  # \\donttest{ # effect of threshold_parameter r <- extract_river(outlet = c(637478, 237413),                     EPSG = 21781, #CH1903/LV03 coordinate system                     ext = c(6.2e5, 6.6e5, 2e5, 2.5e5),                     z = 8, threshold_parameter = 50,             showPlot = TRUE) plot(r) # if threshold_parameter is too small, the outlet might be located # in a smaller river reach, and the extracted river network would be too small # showPlot = TRUE can help identify what is going on  r <- extract_river(outlet = c(637478, 237413),                     EPSG = 21781, #CH1903/LV03 coordinate system                     ext = c(6.2e5, 6.6e5, 2e5, 2.5e5),                     z = 8, threshold_parameter = 1e5,             showPlot = TRUE) plot(r) # if threshold_parameter is too large, the outlet pixel might not be # located at all (for instance, in this case no cells have contributing area # above threshold_parameter), hence throwing an error # } }"},{"path":"https://lucarraro.github.io/rivnet/reference/hydro_river.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign hydraulic variables to a river network — hydro_river","title":"Assign hydraulic variables to a river network — hydro_river","text":"Assign hydraulic variables (width, water depth, discharge, water velocity, ...) across river object measured values based scaling relationships /uniform flow equations.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/hydro_river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign hydraulic variables to a river network — hydro_river","text":"","code":"hydro_river(x, river, level = \"AG\", leopold = TRUE,  expWidth = 0.5, expDepth = 0.4, expQ = 1,  crossSection = \"natural\", ks = 30, minSlope = NULL)"},{"path":"https://lucarraro.github.io/rivnet/reference/hydro_river.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign hydraulic variables to a river network — hydro_river","text":"x Data frame containing measured hydraulic variables. must consist columns data (numeric values width m, depth m discharge m^3 s^(-1)), type (containing variable type: width (\"w\"), depth (\"d\") discharge (\"Q\")), node (ID AG RN nodes data measured). See details. river river object. must aggregated (via aggregate_river). level Aggregation level nodes x$node defined hydraulic variables calculated. Possible values \"RN\", \"AG\". See OCNet details. leopold Logical. scaling relationships hydraulic variables drainage area (spirit Leopold Maddock, 1953) preferred uniform flow (Gauchler-Strickler/Manning) relationships? See details. expWidth Exponent scaling relationship width drainage area. See details. expDepth Exponent scaling relationship depth drainage area. See details. expQ Exponent scaling relationship discharge drainage area. See details. crossSection Shape river cross-section (constant across river network). Possible values \"rectangular\", \"natural\", numeric value indicating exponent width-depth relationship. See details. ks Roughness coefficient according Gauchler-Strickler (m^(1/3)s^(-1)). inverse Manning's roughness coefficient. can single value (thus assumed constant whole river network), vector length equal number nodes specified level (one roughness coefficient value corresponding node). minSlope Minimum slope value, replacing null NaN values slope river object. NULL, assumed equal either river$slope0 (river OCN) minimum positive slope value selected level.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/hydro_river.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign hydraulic variables to a river network — hydro_river","text":"river object. following elements added list indicated level: width, depth, discharge Values assigned nodes (see Details). Units m, m, m^3 s^(-1), respectively. velocity Values m s^(-1). Calculated continuity (.e., ratio discharge cross-sectional area). volume Values m^3. Calculated cross-sectional area times length. hydraulicRadius Values m. Calculated ratio cross-sectional area wetted perimeter. shearStress Values N m^(-2). Shear stress exerted streambed waterflow. Calculated gamma*hydraulicRadius*slope, gamma = 9806 N m^(-3) specific weight water.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/hydro_river.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign hydraulic variables to a river network — hydro_river","text":"function complete version rivergeometry_OCN. x must consist least one width value one value either depth discharge. values included x$data must referred time point, spatial interpolation can performed. goal assessing spatio-temporal changes hydraulic variables, hydro_river must run independently time point. node, one specify multiple values variable type. Function locate_site can used attribute x$node. level = \"AG\", drainage area values used power law relationships calculated 0.5*(river$AG$+ river$AG$AReach). level = \"RN\", river$RN$used. Width values x assumed measured water surface. single width value provided, widths calculated nodes power-law relationship drainage area exponent expWidth width measured node equal provided value. multiple values width provided, function fits width-drainage area power law provided values. case, expWidth used output (fitted) width values measured nodes generally different observed ones. Depending type depth discharge data x, function behaves eight different ways: one depth value zero discharge values provided, Gauchler-Strickler uniform flow relationship (hereafter GS) applied find discharge node depth measured. Discharge values attributed nodes based power-law relationship vs. drainage area (hereafter PL) exponent expQ. Finally, depth values nodes derived GS. one discharge value zero depth values provided, discharge values attributed nodes based PL exponent expQ, value measurement node equal observed one. Depth values nodes derived GS. one discharge one depth value provided (necessarily referred node), discharge values first attributed case 2. leopold = TRUE, depth values derived PL exponent expDepth; conversely, GS applied. multiple values discharge zero values depth provided, discharge values attributed power-law fit measured values vs. drainage area (heareafter PLF). Depth values obtained GS. multiple values depth zero values discharge provided, depth values obtained PLF. Discharge values calculated GS. multiple values discharge one value depth provided, discharge values first computed case 4. Depth values obtained either PF exponent expDepth (leopold = TRUE), alternatively via GS. multiple values depth one value discharge provided, depth values first computed case 5. Discharge values obtained case 2 (leopold = TRUE), alternatively computed GS. multiple values discharge depth provided, discharge values computed case 4, depth values computed case 5. Cross-sections assumed vertically symmetric. crossSection = \"natural\", relationship width depth cross-section expressed width ~ depth^0.65, suggested Leopold Maddock (1953) (width ~ discharge^0.26 depth ~ discharge^0.4). Assuming crossSection = 0 equivalent \"rectangular\" (width depend depth), crossSection = 1 corresponds isosceles triangular cross-section.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/rivnet/reference/hydro_river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign hydraulic variables to a river network — hydro_river","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # \\donttest{   fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\") river <- extract_river(outlet=c(637478,237413),                        DEM=fp) river <- aggregate_river(river)  data <- c(12.8,  6.7,  3.3,  1.1,  9.5,  0.8) type <- c(\"w\",   \"w\",  \"w\",  \"w\",  \"Q\",  \"d\") node <- c( 46,   109,  181,  145,   46,   46) # assume these have been found via locate_site  x <- data.frame(data=data, type=type, node=node)  river1 <- hydro_river(x, river) # case 3 river2 <- hydro_river(x, river, leopold = FALSE) # case 3 (depth calculated via GS)  plot(0.5*(river1$AG$A + river1$AG$AReach), river1$AG$depth) # Power law with exponent 0.4 plot(0.5*(river2$AG$A + river2$AG$AReach),    river2$AG$depth) # Higher depths in reaches with small slope  river3 <- hydro_river(x, river, leopold = FALSE, minSlope = 0.002) plot(0.5*(river1$AG$A + river1$AG$AReach), river1$AG$depth) # Variability is reduced  river <- hydro_river(x[-5, ], river) # case 1 river <- hydro_river(x[-6, ], river) # case 2   # } }"},{"path":"https://lucarraro.github.io/rivnet/reference/locate_site.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate site in a river — locate_site","title":"Locate site in a river — locate_site","text":"Finds location site (coordinates X, Y) within river object.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/locate_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate site in a river — locate_site","text":"","code":"locate_site(X, Y = NULL, river, euclidean = TRUE, showPlot = FALSE,    xlim = NULL, ylim = NULL)"},{"path":"https://lucarraro.github.io/rivnet/reference/locate_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate site in a river — locate_site","text":"X Either list numeric value. X list, must contain longitudinal latitudinal coordinates site columns x (X) y (Y), respectively. numeric, represents longitudinal coordinate site. Coordinate values must given coordinate system river object. Y Latitudinal coordinate site. X list, can contain river object. river river object site located. must aggregated (via aggregate_river). euclidean Logical. location site river attributed \"crow flies\"? FALSE, downstream path (X, Y) followed river network met. showPlot Logical. close-relocated site shown? xlim, ylim Ranges x- y-axis limits plot. active showPlot = TRUE.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/locate_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate site in a river — locate_site","text":"list objects: FDode index FD level node closest (X, Y). generally node belongs river network. distance distance FDnode RNnode, expressed either Euclidean distance (euclidean = TRUE), downstream distance alternatively. RNode index RN level relocated site. AGode index AG level relocated site. par List graphical parameters produced call par (showPlot = TRUE). can used add features existing plot. Deprecated.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/locate_site.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Locate site in a river — locate_site","text":"function identifies node river network (RN AG levels) closest arbitrary site coordinates X, Y. single site can processed per function call. Desired coordinates X, Y can found interactive way clicking river map using function locator. Nodes RN level thus found can defined new breakpoints reaches (see aggregate_OCN argument breakpoints).","code":""},{"path":[]},{"path":"https://lucarraro.github.io/rivnet/reference/locate_site.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate site in a river — locate_site","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # \\donttest{  fp <- system.file(\"extdata/wigger.tif\", package = \"rivnet\")  r <- extract_river(outlet = c(637478, 237413),                     DEM = fp)              r <- aggregate_river(r)    X <- 641329; Y <- 227414   out1 <- locate_site(X, Y, r, showPlot = TRUE) # as the crow flies  out2 <- locate_site(X, Y, r, showPlot = TRUE, euclidean = FALSE) # follow downstream path    # }     # define X, Y by clicking on the map  if (interactive()) {  fp <- system.file(\"extdata/wigger.tif\", package = \"rivnet\")  r <- extract_river(outlet = c(637478, 237413),                     DEM = fp)              r <- aggregate_river(r)  plot(r)    point <- locator(1) # click on the map to define point  locate_site(point$X, point$Y, r)    # alternative: specify X as a list and pass river as second argument  locate_site(point, r)  } }"},{"path":"https://lucarraro.github.io/rivnet/reference/path_velocities_river.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate velocities along paths in a river — path_velocities_river","title":"Calculate velocities along paths in a river — path_velocities_river","text":"Calculate mean water velocities along paths river object.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/path_velocities_river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate velocities along paths in a river — path_velocities_river","text":"","code":"path_velocities_river(river, level = c(\"RN\", \"AG\"),    displayUpdates = FALSE)"},{"path":"https://lucarraro.github.io/rivnet/reference/path_velocities_river.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate velocities along paths in a river — path_velocities_river","text":"river river object. must aggregated (via aggregate_river), contain paths (via paths_river includeDownstreamNode = TRUE) velocities (via hydro_river rivergeometry_OCN) desired aggregation level(s). See level. level Aggregation level(s) path velocities calculated. Possible values \"RN\", \"AG\", c(\"RN\",\"AG\"). displayUpdates Logical. State updates printed console path_velocities_river runs.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/path_velocities_river.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate velocities along paths in a river — path_velocities_river","text":"river object. following element added list indicated level: pathVelocities spam object. pathVelocities[, j] mean water velocity along downstream path nodes j, null two nodes connected path.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/path_velocities_river.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate velocities along paths in a river — path_velocities_river","text":"Velocities calculated dividing total distance (length downstream path joining two nodes) total time (sum times taken cover nodes origin destination nodes; times calculated length/velocity). Note paths may may include downstream node; controlled option includeDownstreamNode paths_river. Path velocities calculated accordingly. cases, diagonal entries pathVelocity set equal respective node velocity. See example.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/rivnet/reference/path_velocities_river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate velocities along paths in a river — path_velocities_river","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # \\donttest{   fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\") river <- extract_river(outlet=c(637478,237413),                        DEM=fp) river <- aggregate_river(river) river <- paths_river(river, includePaths = TRUE) river <- OCNet::rivergeometry_OCN(river) # simplified alternative to hydro_river                                   # to attribute velocities at all RN and AG nodes                    river <- path_velocities_river(river, level = \"AG\") # downstream nodes are not included in paths river$AG$pathVelocities[176, 176]  river$AG$pathVelocities[176, 174]  # node 174 is immediately downstream of 176; if downstream nodes are not included   # in paths, the two velocities are equal  river2 <- paths_river(river, includePaths = TRUE, includeDownstreamNode = TRUE) river2 <- path_velocities_river(river2, level = \"AG\") # now downstream nodes are included in paths river2$AG$pathVelocities[176, 176]  river2$AG$pathVelocities[176, 174]  # }  }"},{"path":"https://lucarraro.github.io/rivnet/reference/paths_river.html","id":null,"dir":"Reference","previous_headings":"","what":"Find paths in a river — paths_river","title":"Find paths in a river — paths_river","text":"Find paths river","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/paths_river.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find paths in a river — paths_river","text":"","code":"paths_river(river, ...)"},{"path":"https://lucarraro.github.io/rivnet/reference/paths_river.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find paths in a river — paths_river","text":"river river object. ... arguments passed paths_OCN.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/paths_river.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find paths in a river — paths_river","text":"river object. See paths_OCN description structure.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/paths_river.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find paths in a river — paths_river","text":"alias paths_OCN.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/paths_river.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find paths in a river — paths_river","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # \\donttest{  fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\")  r <- extract_river(outlet=c(637478,237413),   DEM=fp) r <- aggregate_river(r)   r <- paths_river(r) # } }"},{"path":"https://lucarraro.github.io/rivnet/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a river — plot","title":"Plot a river — plot","text":"Plots river object","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a river — plot","text":"","code":"# S4 method for class 'river,numeric' plot(x, y, type, ...) # S4 method for class 'numeric,river' plot(x, y, type, ...) # S4 method for class 'river,missing' plot(x, type, ...)"},{"path":"https://lucarraro.github.io/rivnet/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a river — plot","text":"x river object (numeric vector y river). y numeric vector displayed (river x numeric vector). equivalent theme draw_subcatchments_OCN draw_thematic_OCN. y specified, river must aggregated. See details. type Optional argument. type = \"SC\" type = \"subcatchments\", draw_subcatchments_OCN used (provided river object aggregated);  type = \"elev2D\", draw_elev2D_OCN used; type = \"contour\", draw_contour_OCN used (provided river object contains CM field produced landscape_OCN extract_river); alternatively, draw_thematic_OCN used. ... Arguments passed plotting functions draw_simple_OCN, draw_contour_OCN, draw_thematic_OCN. See details.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a river — plot","text":"interface plotting functions draw_simple_OCN, draw_elev2D_OCN, draw_contour_OCN, draw_subcatchments_OCN, draw_thematic_OCN. river object elevation field (.e., generated create_OCN create_general_contour_OCN, landscape_OCN run), plotting function used draw_simple_OCN. elevation field present, river aggregated (via aggregate_OCN aggregate_river), default plotting function used  draw_contour_OCN. river aggregated, draw_subcatchments_OCN draw_thematic_OCN used depending type.  Elevation maps can produced type = \"elev2D\", regardless whether river aggregated. Adding scale bar north arrow. Scale bar north arrow can added via terra's functions sbar north, respectively. However, note arguments d xy must specified user (rast object plotted). See example.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/rivnet/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a river — plot","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\") r <- extract_river(outlet=c(637478,237413),   DEM=fp) plot(r)  # equivalent to draw_contour_OCN  # \\donttest{ r <- aggregate_river(r) plot(r) # equivalent to draw_thematic_OCN plot(r, type = \"SC\") # equivalent to draw_subcatchments_OCN plot(r, type = \"contour\")  # equivalent to draw_contour_OCN   # equivalent to draw_thematic_OCN with 'theme' specified plot(r, r$AG$streamOrder, discreteLevels = TRUE) plot(r$AG$streamOrder, r, discreteLevels = TRUE)  # swapping arguments is allowed  # equivalent to draw_subcatchments_OCN with 'theme' specified plot(r, r$SC$Y, type = \"SC\", addLegend = FALSE) plot(r$SC$Y, r,  type = \"subcatchments\", addLegend = FALSE)  # swapping arguments is allowed  # plot elevation map plot(r, type = \"elev2D\", drawRiver = TRUE) # now add scale bar and north arrow library(terra) # sbar() # this would throw an error # north()# this would throw an error sbar(d=1000, xy=c(min(r$FD$X), min(r$FD$Y)-r$cellsize)) # this works north(d=1000, xy=c(max(r$FD$X)+r$cellsize, max(r$FD$Y))) # this works # } }"},{"path":"https://lucarraro.github.io/rivnet/reference/points_colorscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw points with a colorscale — points_colorscale","title":"Draw points with a colorscale — points_colorscale","text":"Draw points values displayed colors. Two different sets values can shown simultaneously: one background one contour.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/points_colorscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw points with a colorscale — points_colorscale","text":"","code":"points_colorscale(X, Y, values,                   bg.palette = hcl.colors(1000, \"Reds 3\", rev=T),                   col.palette = hcl.colors(1000, \"Reds 3\",rev=T),                   bg.range = NULL, col.range = NULL,                   pch = 21, cex = 2, lwd = 1.5, force.range = TRUE,                   add.col.legend = FALSE, ...)"},{"path":"https://lucarraro.github.io/rivnet/reference/points_colorscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw points with a colorscale — points_colorscale","text":"X, Y Coordinates points displayed. values values quantity shown sampling sites. can single vector         (colors shown inside points), data frame (first column          related colors inside, second colors outside points). bg.palette, col.palette Color palettes values inside outside points, respectively. bg.range, col.range Ranges legend values inside outside points, \t\t\t\t\t\t\trespectively. specified, range values (min-max) used. pch, cex, lwd plot() (Note: use values 21-25 pch). force.range Locical. TRUE, values outside range constrained boundaries range; FALSE, transparent color used. add.col.legend Logical. Add legend values outside points? ... Additional arguments passed imagePlot draw legend.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/points_colorscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw points with a colorscale — points_colorscale","text":"output produced. function used side effetcs.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/points_colorscale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw points with a colorscale — points_colorscale","text":"call points performed background. Therefore, plot window must open function called.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/points_colorscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw points with a colorscale — points_colorscale","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\") river <- extract_river(outlet=c(637478,237413), DEM=fp) river <- aggregate_river(river)  # some random location of sampling sites, just to test the function samplingSites <- c(2,15,30,78,97,117,132,106,138,153,156,159,                     263,176,215,189,11,70,79,87,45,209,26,213) # we use drainage area as an example variable to be shown  # 1) the function must be called after \"plot(river)\" plot(river) points_colorscale(river$AG$X[samplingSites], river$AG$Y[samplingSites],                    river$AG$A[samplingSites])  # 2) change color palette plot(river) points_colorscale(river$AG$X[samplingSites], river$AG$Y[samplingSites],                   river$AG$A[samplingSites],                   bg.palette = hcl.colors(1000, \"Inferno\"))  # 3) impose a different range plot(river) points_colorscale(river$AG$X[samplingSites], river$AG$Y[samplingSites],                   river$AG$A[samplingSites],                   bg.range = c(0, 1e8))  # 4) show values outside the range as transparent plot(river) points_colorscale(river$AG$X[samplingSites], river$AG$Y[samplingSites],                   river$AG$A[samplingSites],                   bg.range = c(0, 1e8), force.range = FALSE)  # 5) show values both on inside and outside of the points ( # drainage area at the upstream vs. downstream end of the reach) plot(river) points_colorscale(river$AG$X[samplingSites], river$AG$Y[samplingSites],             data.frame(river$AG$A[samplingSites], 1.5*river$AG$A[samplingSites]),             bg.range = c(0, 1e8), col.range = c(0, 1e8),              lwd = 4)# increase contour line so it's more visible # specify same range for both bg.range and col.range # otherwise they will be shown on different scale         # 6) same as before, but show two different quantities:  # drainage area (inside) vs. elevation (outside) # use different color palettes and add legend for the second color palette plot(river) points_colorscale(river$AG$X[samplingSites], river$AG$Y[samplingSites],             data.frame(river$AG$A[samplingSites], river$AG$Z[samplingSites]),             col.palette = terrain.colors(1000),             lwd = 4, add.col.legend = TRUE) }"},{"path":"https://lucarraro.github.io/rivnet/reference/river-class.html","id":null,"dir":"Reference","previous_headings":"","what":"river class — river-class","title":"river class — river-class","text":"river object contains information river attributes different aggregation levels. can represent real river network (obtained via extract_river) optimal channel network (obtained via create_OCN). content river object can treated list, hence objects sublists can accessed $ @ operators. information aggregation levels content river object, see OCNet-package.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"river class — river-class","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\") r <- extract_river(outlet=c(637478,237413),   DEM=fp)  show(r) names(r)  # extract or replace parts of a river object r$dimX r@dimX dim <- r[[\"dimX\"]] r$dimX <- 1 r[[\"dimX\"]] r[[\"dimX\"]] <- dim  }"},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_AEM.html","id":null,"dir":"Reference","previous_headings":"","what":"river_to_AEM — river_to_AEM","title":"river_to_AEM — river_to_AEM","text":"Construct asymmetric eigenvector maps (AEM) river","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_AEM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"river_to_AEM — river_to_AEM","text":"","code":"river_to_AEM(river, ...)"},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_AEM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"river_to_AEM — river_to_AEM","text":"river river object. ... arguments passed OCN_to_AEM.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_AEM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"river_to_AEM — river_to_AEM","text":"river object.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_AEM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"river_to_AEM — river_to_AEM","text":"alias OCN_to_AEM.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_AEM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"river_to_AEM — river_to_AEM","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # \\donttest{  fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\")  r <- extract_river(outlet=c(637478, 237413),   DEM = fp) r <- aggregate_river(r) out.aem <- river_to_AEM(r) # } }"},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_SSN.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform river into SSN object — river_to_SSN","title":"Transform river into SSN object — river_to_SSN","text":"Transform river SpatialStreamNetwork object.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_SSN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform river into SSN object — river_to_SSN","text":"","code":"river_to_SSN(river, ...)"},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_SSN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform river into SSN object — river_to_SSN","text":"river river object. ... arguments passed OCN_to_SSN.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_SSN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform river into SSN object — river_to_SSN","text":"SpatialStreamNetwork object importToR TRUE, otherwise NULL.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_SSN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform river into SSN object — river_to_SSN","text":"alias OCN_to_SSN.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_SSN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform river into SSN object — river_to_SSN","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # \\donttest{  fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\")  r <- extract_river(outlet=c(637478,237413),   DEM=fp) r <- aggregate_river(r)   s <- river_to_SSN(r, level = \"AG\", obsSites = sample(r$AG$nNodes, 10),   path = paste(tempdir(),\"/river.ssn\", sep = \"\"), importToR = TRUE) plot(s) # } }"},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"river_to_igraph — river_to_igraph","title":"river_to_igraph — river_to_igraph","text":"Transform river igraph object.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"river_to_igraph — river_to_igraph","text":"","code":"river_to_igraph(river, ...)"},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"river_to_igraph — river_to_igraph","text":"river river object. ... arguments passed OCN_to_igraph.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"river_to_igraph — river_to_igraph","text":"igraph object.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"river_to_igraph — river_to_igraph","text":"alias OCN_to_igraph.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"river_to_igraph — river_to_igraph","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() # \\donttest{  fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\")  r <- extract_river(outlet=c(637478,237413),   DEM=fp) r <- aggregate_river(r)   g <- river_to_igraph(r, level = \"AG\") g # } }"},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_shapefile.html","id":null,"dir":"Reference","previous_headings":"","what":"Export river network as shapefile — river_to_shapefile","title":"Export river network as shapefile — river_to_shapefile","text":"Export river network shapefile. Reach attributes can added.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_shapefile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export river network as shapefile — river_to_shapefile","text":"","code":"river_to_shapefile(river, filename, atts = NULL,                      EPSG = NULL, ...)"},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_shapefile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export river network as shapefile — river_to_shapefile","text":"river river object. must aggregated (via aggregate_river). filename Character. Output file name. must contain \".shp\" extension. atts Attributes AG level can exported. character vector, entries  corresponding names fields within AG sub-list river. See example. EPSG EPSG code. Default NULL, produce .prj file (.e., shapefile  contain projection information). ... Additional arguments passed writeVector (e.g., overwrite = TRUE allows overwriting existing shapefile).","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_shapefile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export river network as shapefile — river_to_shapefile","text":"output produced. function used side effetcs.","code":""},{"path":[]},{"path":"https://lucarraro.github.io/rivnet/reference/river_to_shapefile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export river network as shapefile — river_to_shapefile","text":"","code":"if (FALSE) { # interactive() && traudem::can_register_taudem() library(terra) # to use \"vect\" fp <- system.file(\"extdata/wigger.tif\", package=\"rivnet\") river <- extract_river(outlet=c(637478,237413), DEM=fp) river <- aggregate_river(river)  tmpname <- paste0(tempfile(), \".shp\") river_to_shapefile(river, tmpname, overwrite = TRUE)  # read output vv <- vect(tmpname) vv plot(vv)  # \\donttest{ # add attributes to shapefile (drainage area, stream order) river_to_shapefile(river, tmpname,           atts = c(\"A\", \"streamOrder\"), # same names as in river$AG           overwrite = TRUE)  vv <- vect(tmpname) vv  # add projection  river_to_shapefile(river, tmpname,            EPSG = 21781,            overwrite = TRUE) vv <- vect(tmpname) vv           # }  }"},{"path":"https://lucarraro.github.io/rivnet/reference/rivnet-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and Analyze Rivers from Elevation Data. — rivnet-package","title":"Extract and Analyze Rivers from Elevation Data. — rivnet-package","text":"Seamless extraction river networks digital     elevation models data. package allows analysis digital \televation models can either externally provided \tdownloaded open source repositories (thus interfacing \televatr package). Extraction performed via \t'D8' flow direction algorithm TauDEM (Terrain Analysis Using \tDigital Elevation Models), thus interfacing traudem \tpackage. Resulting river networks compatible functions \tOCNet package.","code":""},{"path":"https://lucarraro.github.io/rivnet/reference/rivnet-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract and Analyze Rivers from Elevation Data. — rivnet-package","text":"Luca Carraro (luca.carraro@hotmail.)","code":""},{"path":[]},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"major-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"rivnet 0.5.0","text":"river_to_shapefile: function added. contour_to_shapefile: function added.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"minor-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"rivnet 0.5.0","text":"extract_river: argument n_processes greater number available cores. locate_site: call graphical parameters removed. Exported value par now deprecated (useless).","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-042","dir":"Changelog","previous_headings":"","what":"rivnet 0.4.2","title":"rivnet 0.4.2","text":"CRAN release: 2024-05-08","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"minor-changes-0-4-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"rivnet 0.4.2","text":"Dependency traudem >= 1.0.3 added.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-041","dir":"Changelog","previous_headings":"","what":"rivnet 0.4.1","title":"rivnet 0.4.1","text":"CRAN release: 2024-04-16","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"minor-changes-0-4-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"rivnet 0.4.1","text":"BugReports link added DESCRIPTION. extract_river: improved title appearance figures showPlot = TRUE. plot: option type = \"contour\" relative example added.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-040","dir":"Changelog","previous_headings":"","what":"rivnet 0.4.0","title":"rivnet 0.4.0","text":"CRAN release: 2024-01-09","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"major-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"rivnet 0.4.0","text":"extract_river: temporary files generated TauDEM deleted soon longer needed.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"minor-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"rivnet 0.4.0","text":"extract_river: argument displayUpdates accepts numeric values 0, 1, 2. plot: example use terra::north terra::sbar added. points_colorscale: bug fixed Inf -Inf values.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-034","dir":"Changelog","previous_headings":"","what":"rivnet 0.3.4","title":"rivnet 0.3.4","text":"CRAN release: 2023-11-24","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"minor-changes-0-3-4","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"rivnet 0.3.4","text":"extract_river: warning thrown whenever EPSG identifies geographic projection system. extract_river: option showPlot = TRUE shows additional plot zoom-outlet area, can help diagnose issues catchment delineation. points_colorscale: Argument ... added.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-033","dir":"Changelog","previous_headings":"","what":"rivnet 0.3.3","title":"rivnet 0.3.3","text":"CRAN release: 2023-10-24","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"minor-changes-0-3-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"rivnet 0.3.3","text":"DESCRIPTION updated DOI published article. CITATION added.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-032","dir":"Changelog","previous_headings":"","what":"rivnet 0.3.2","title":"rivnet 0.3.2","text":"CRAN release: 2023-10-14","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"minor-changes-0-3-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"rivnet 0.3.2","text":"extract_river: option args_get_elev_raster added.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-031","dir":"Changelog","previous_headings":"","what":"rivnet 0.3.1","title":"rivnet 0.3.1","text":"CRAN release: 2023-09-08","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"major-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Major changes","title":"rivnet 0.3.1","text":"points_colorscale: function added.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-030","dir":"Changelog","previous_headings":"","what":"rivnet 0.3.0","title":"rivnet 0.3.0","text":"CRAN release: 2023-07-17","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"major-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"rivnet 0.3.0","text":"river_to_AEM: function added.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-021","dir":"Changelog","previous_headings":"","what":"rivnet 0.2.1","title":"rivnet 0.2.1","text":"CRAN release: 2023-06-13","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"minor-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"rivnet 0.2.1","text":"extract_river: curl::has_internet() check elevatr::get_elev_raster overridden. extract_river: crs attributed outlet shapefile written temporary directory. locate_site: par exported showPlot = TRUE. Example updated.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"rivnet-020","dir":"Changelog","previous_headings":"","what":"rivnet 0.2.0","title":"rivnet 0.2.0","text":"CRAN release: 2023-04-21","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"major-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"rivnet 0.2.0","text":"\"[[\", \"[[<-\" methods river class defined examples added. path_velocities_river: C++ implementation added. Dependency Rcpp added. covariate_river: argument overwrite added. locate_site: site coordinates can passed list. Example added.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"minor-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"rivnet 0.2.0","text":"Info installation CRAN updated vignette. inst/extdata/temperature.tif changed. extract_river: warning thrown WGS84 (EPSG = 4326) projection system selected.","code":""},{"path":"https://lucarraro.github.io/rivnet/news/index.html","id":"bugs-solved-0-2-0","dir":"Changelog","previous_headings":"","what":"Bugs solved","title":"rivnet 0.2.0","text":"extract_river: multiple catchment shapes shown showPlot = TRUE multiple, non-neighboring catchments extracted. covariate_river: fixed bug raster file containing NA values.","code":""}]
